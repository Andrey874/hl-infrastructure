# -*- mode: ruby -*-
# vi: set ft=ruby :

home = ENV['HOME']

Vagrant.configure(2) do |config|

  config.vm.define "lb1" do |main|
    main.vm.network "public_network",adapter: 2, bridge: "Realtek PCIe GbE Family Controller"
    main.vm.network "private_network", adapter: 3, ip: '10.0.0.11', netmask: "255.255.255.0" # Management
    main.vm.hostname = "lb1"
    main.vm.box = "almalinux/9.4"
    main.vm.provision "shell", inline: <<-SHELL
    mkdir -p /etc/skel/.ssh
    echo '10.0.0.11  lb1' >> /etc/hosts
    echo '10.0.0.2  lb2' >> /etc/hosts
    echo '10.0.0.3  app1' >> /etc/hosts
    echo '10.0.0.4  app2' >> /etc/hosts
    echo '10.0.0.10 db-dss' >> /etc/hosts
    useradd -m -s /bin/bash -p `openssl passwd -1 -salt xyz 123321ab` ansible
    usermod -aG wheel ansible
    sed -i 's/^# %wheel/%wheel/' /etc/sudoers
    sed -i '/^127\.0\.1\.1.*$/d' /etc/hosts
    SHELL
    main.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "lb1"
      virtualbox.customize ["modifyvm", :id, "--memory", "2048"]
      virtualbox.customize ["modifyvm", :id, "--cpus", "2"]
    end
  end

  config.vm.define "lb2" do |main|
    main.vm.network "public_network",adapter: 2, bridge: "Realtek PCIe GbE Family Controller"
    main.vm.network "private_network", adapter: 3, ip: '10.0.0.2', netmask: "255.255.255.0" # Management
    main.vm.hostname = "lb2"
    main.vm.box = "almalinux/9.4"
    main.vm.provision "shell", inline: <<-SHELL
    mkdir -p /etc/skel/.ssh
    echo '10.0.0.11  lb1' >> /etc/hosts
    echo '10.0.0.2  lb2' >> /etc/hosts
    echo '10.0.0.3  app1' >> /etc/hosts
    echo '10.0.0.4  app2' >> /etc/hosts
    echo '10.0.0.10 db-dss' >> /etc/hosts
    useradd -m -s /bin/bash -p `openssl passwd -1 -salt xyz 123321ab` ansible
    usermod -aG wheel ansible
    sed -i 's/^# %wheel/%wheel/' /etc/sudoers
    sed -i '/^127\.0\.1\.1.*$/d' /etc/hosts
    SHELL
    main.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "lb2"
      virtualbox.customize ["modifyvm", :id, "--memory", "2048"]
      virtualbox.customize ["modifyvm", :id, "--cpus", "2"]
    end
  end

  config.vm.define "app1" do |main|
    main.vm.network "public_network",adapter: 2, bridge: "Realtek PCIe GbE Family Controller"
    main.vm.network "private_network", adapter: 3, ip: '10.0.0.3', netmask: "255.255.255.0" # Management
    main.vm.network "private_network", adapter: 4, ip: '10.1.1.11', netmask: "255.255.255.0" # iscsi
    main.vm.hostname = "app1"
    main.vm.box = "almalinux/9.4"
    main.vm.provision "shell", inline: <<-SHELL
    mkdir -p /etc/skel/.ssh
    echo '10.0.0.11  lb1' >> /etc/hosts
    echo '10.0.0.2  lb2' >> /etc/hosts
    echo '10.0.0.3  app1' >> /etc/hosts
    echo '10.0.0.4  app2' >> /etc/hosts
    echo '10.0.0.10 db-dss' >> /etc/hosts
    useradd -m -s /bin/bash -p `openssl passwd -1 -salt xyz 123321ab` ansible
    usermod -aG wheel ansible
    sed -i 's/^# %wheel/%wheel/' /etc/sudoers
    sed -i '/^127\.0\.1\.1.*$/d' /etc/hosts
    SHELL
    main.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "app1"
      virtualbox.customize ["modifyvm", :id, "--memory", "2048"]
      virtualbox.customize ["modifyvm", :id, "--cpus", "2"]
    end
  end

  config.vm.define "app2" do |main|
    main.vm.network "public_network",adapter: 2, bridge: "Realtek PCIe GbE Family Controller"
    main.vm.network "private_network", adapter: 3, ip: '10.0.0.4', netmask: "255.255.255.0" # Management
    main.vm.network "private_network", adapter: 4, ip: '10.1.1.2', netmask: "255.255.255.0" # iscsi
    main.vm.hostname = "app2"
    main.vm.box = "almalinux/9.4"
    main.vm.provision "shell", inline: <<-SHELL
    mkdir -p /etc/skel/.ssh
    echo '10.0.0.11  lb1' >> /etc/hosts
    echo '10.0.0.2  lb2' >> /etc/hosts
    echo '10.0.0.3  app1' >> /etc/hosts
    echo '10.0.0.4  app2' >> /etc/hosts
    echo '10.0.0.10 db-dss' >> /etc/hosts
    useradd -m -s /bin/bash -p `openssl passwd -1 -salt xyz 123321ab` ansible
    usermod -aG wheel ansible
    sed -i 's/^# %wheel/%wheel/' /etc/sudoers
    sed -i '/^127\.0\.1\.1.*$/d' /etc/hosts
    SHELL
    main.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "app2"
      virtualbox.customize ["modifyvm", :id, "--memory", "2048"]
      virtualbox.customize ["modifyvm", :id, "--cpus", "2"]
    end
  end

  config.vm.define "db-dss" do |main|
    main.vm.network "public_network",adapter: 2, bridge: "Realtek PCIe GbE Family Controller"
    main.vm.network "private_network", adapter: 3, ip: '10.0.0.10', netmask: "255.255.255.0" # Management
    main.vm.network "private_network", adapter: 4, ip: '10.1.1.10', netmask: "255.255.255.0" #iscsi
    main.vm.hostname = "db-dss"
    main.vm.box = "almalinux/9.2"
    main.vm.provision "shell", inline: <<-SHELL
    mkdir -p /etc/skel/.ssh
    echo '10.0.0.11  lb1' >> /etc/hosts
    echo '10.0.0.2  lb2' >> /etc/hosts
    echo '10.0.0.3  app1' >> /etc/hosts
    echo '10.0.0.4  app2' >> /etc/hosts
    echo '10.0.0.10 db-dss' >> /etc/hosts
    useradd -m -s /bin/bash -p `openssl passwd -1 -salt xyz 123321ab` ansible
    usermod -aG wheel ansible
    sed -i 's/^# %wheel/%wheel/' /etc/sudoers
    sed -i '/^127\.0\.1\.1.*$/d' /etc/hosts
    dnf install sshpass -y
    dnf -y install epel-release && dnf -y install ansible
    cp -r /vagrant/ansible /home/ansible
    chown -R ansible:ansible /home/ansible/ansible
    ssh-keygen -q -t rsa -N "" -f "/afs/id_rsa"
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config && systemctl reload sshd
    cp -f /afs/id_rsa /home/vagrant/.ssh/
    chown vagrant:vagrant /home/vagrant/.ssh/id_rsa
    chmod 0600 /home/vagrant/.ssh/id_rsa
    mkdir -p /root/.ssh/
    cp -f /afs/id_rsa /root/.ssh/
    chown root:root /root/.ssh/id_rsa
    chmod 0600 /root/.ssh/id_rsa
    cp -f /afs/id_rsa /home/ansible/.ssh/
    chown ansible:ansible /home/ansible/.ssh/id_rsa
    chmod 0600 /home/ansible/.ssh/id_rsa

    ssh-keyscan -t rsa lb1 >> /home/vagrant/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa lb2 >> /home/vagrant/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa app1 >> /home/vagrant/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa app2 >> /home/vagrant/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa db-dss >> /home/vagrant/.ssh/known_hosts 2>/dev/null
    chown vagrant:vagrant /home/vagrant/.ssh/known_hosts
    chmod 0600 /home/vagrant/.ssh/known_hosts

    ssh-keyscan -t rsa lb1 >> /root/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa lb2 >> /root/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa app1 >> /root/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa app2 >> /root/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa db-dss >> /root/.ssh/known_hosts 2>/dev/null

    ssh-keyscan -t rsa lb1 >> /home/ansible/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa lb2 >> /home/ansible/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa app1 >> /home/ansible/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa app2 >> /home/ansible/.ssh/known_hosts 2>/dev/null
    ssh-keyscan -t rsa db-dss >> /home/ansible/.ssh/known_hosts 2>/dev/null
    chown ansible:ansible /home/ansible/.ssh/known_hosts
    chmod 0600 /home/ansible/.ssh/known_hosts

    sshpass -p "vagrant" ssh-copy-id -f -i /afs/id_rsa.pub vagrant@lb1
    sshpass -p "vagrant" ssh-copy-id -f -i /afs/id_rsa.pub vagrant@lb2
    sshpass -p "vagrant" ssh-copy-id -f -i /afs/id_rsa.pub vagrant@app1
    sshpass -p "vagrant" ssh-copy-id -f -i /afs/id_rsa.pub vagrant@app2
    sshpass -p "vagrant" ssh-copy-id -f -i /afs/id_rsa.pub vagrant@db-dss

    sshpass -p "123321ab" ssh-copy-id -f -i /afs/id_rsa.pub ansible@lb1
    sshpass -p "123321ab" ssh-copy-id -f -i /afs/id_rsa.pub ansible@lb2
    sshpass -p "123321ab" ssh-copy-id -f -i /afs/id_rsa.pub ansible@app1
    sshpass -p "123321ab" ssh-copy-id -f -i /afs/id_rsa.pub ansible@app2
    sshpass -p "123321ab" ssh-copy-id -f -i /afs/id_rsa.pub ansible@db-dss

    ssh -i /root/.ssh/id_rsa vagrant@lb1 "sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config && sudo systemctl reload sshd"
    ssh -i /root/.ssh/id_rsa vagrant@lb2 "sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config && sudo systemctl reload sshd"
    ssh -i /root/.ssh/id_rsa vagrant@app1 "sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config && sudo systemctl reload sshd"
    ssh -i /root/.ssh/id_rsa vagrant@app2 "sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config && sudo systemctl reload sshd"
    ssh -i /root/.ssh/id_rsa vagrant@db-dss "sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config && sudo systemctl reload sshd"
    SHELL
    main.vm.provider :virtualbox do |virtualbox|
      virtualbox.name = "db-dss"
      virtualbox.customize ["modifyvm", :id, "--memory", "2048"]
      virtualbox.customize ["modifyvm", :id, "--cpus", "2"]
      unless File.exist?('../storage/hdd_sdb.vdi')
        virtualbox.customize ['createhd', '--filename', '../storage/hdd_sdb.vdi', '--variant', 'Fixed', '--size', 2048]
        virtualbox.customize ['storageattach', :id,  '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', '../storage/hdd_sdb.vdi']
    end
  end
  end   
end
